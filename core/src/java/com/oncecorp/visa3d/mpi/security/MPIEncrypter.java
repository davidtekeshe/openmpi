/**
 * Copyright 2003, 2004  ONCE Corporation
 *
 * LICENSE:
 * This file is part of BuilditMPI. It may be redistributed and/or modified
 * under the terms of the Common Public License, version 1.0.
 * You should have received a copy of the Common Public License along with this
 * software. See LICENSE.txt for details. Otherwise, you may find it online at:
 *   http://www.oncecorp.com/CPL10/ or http://opensource.org/licenses/cpl.php
 *
 * DISCLAIMER OF WARRANTIES AND LIABILITY:
 * THE SOFTWARE IS PROVIDED "AS IS".  THE AUTHOR MAKES NO REPRESENTATIONS OR
 * WARRANTIES, EITHER EXPRESS OR IMPLIED.  TO THE EXTENT NOT PROHIBITED BY LAW,
 * IN NO EVENT WILL THE AUTHOR BE LIABLE FOR ANY DAMAGES, INCLUDING WITHOUT
 * LIMITATION, LOST REVENUE, PROFITS OR DATA, OR FOR SPECIAL, INDIRECT,
 * CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS
 * OF THE THEORY OF LIABILITY, ARISING OUT OF OR RELATED TO ANY FURNISHING,
 * PRACTICING, MODIFYING OR ANY USE OF THE SOFTWARE, EVEN IF THE AUTHOR HAVE
 * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 *
 * -----------------------------------------------------
 * $Id$
 */

package com.oncecorp.visa3d.mpi.security;

import com.oncecorp.visa3d.mpi.logging.MPILogger;

import java.io.InputStream;
import java.io.ObjectInputStream;
import java.security.AlgorithmParameters;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

import org.apache.log4j.Logger;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import com.sun.crypto.provider.SunJCE;

/**
 * Description: This class is a MPI encryption utility class, which
 * applies SunJCE as provider, DESede key to encrypt and decrypt
 * MPI data by using CBC of the Triple DES (3DES) algorithm.
 * It loads the Secretkey from "Key.store", which is a file storing
 * a key generated by MPIKeyGenerator
 *
 * @version 0.1 Aug 19, 2002
 * @author	Jun Shi
 */

public class MPIEncrypter {

    // Local Log4J logger
	private static Logger logger = MPILogger.getLogger(MPIEncrypter.class.getName());

    // JCE Provider
    private final static String PROVIDER_NAME = "SunJCE";

    // File Name of the Key
    private final static String KEY_FILE_NAME = "Key.store";

    // Selected Algorithm and Other Para Value
    private final static String ALGORITHM_NAME       = "TripleDES"; // Triple DES
    private final static String ALGORITHM_WITH_PARA  = "TripleDES/CBC/PKCS5Padding"; // padding algorithm
    private final static String ENCODE_TYPE          = "UTF-8";
    private final static String INIT_VECTOR          = "12345678"; // at least 8 digits

    // Global referrence
    private static Cipher ecipher = null;
    private static Cipher dcipher = null;
    private static BASE64Encoder encoder;
    private static BASE64Decoder decoder;

    /**
     * Constructor: do initialization
     */
    private MPIEncrypter() {
       try {
          // Remove existing SunJCE in case It is not in a right position
          // This method returns silently if SunJCE is not installed
          Security.removeProvider(MPIEncrypter.PROVIDER_NAME);

          // Explicitly add SunJCE provider and specify its provider position as 2
          int i = Security.insertProviderAt(new SunJCE(), 2);

          // loading key
          InputStream inputFile = this.getClass().getResourceAsStream(MPIEncrypter.KEY_FILE_NAME);
          ObjectInputStream cin = new ObjectInputStream( inputFile );
          SecretKey key = (SecretKey) cin.readObject();

          // Create the Initialization vector needed for the encryption/decryption
          byte [] myIv=(MPIEncrypter.INIT_VECTOR).getBytes(MPIEncrypter.ENCODE_TYPE);
          IvParameterSpec desparamspec = new IvParameterSpec(myIv);
          byte[] ivbytes = desparamspec.getIV();
          AlgorithmParameters desparam = AlgorithmParameters.getInstance(MPIEncrypter.ALGORITHM_NAME);

          // Initialize the DES parameters from the Iv parameter spec.
          desparam.init(desparamspec);

          // create ecipher
          ecipher = Cipher.getInstance(MPIEncrypter.ALGORITHM_WITH_PARA, MPIEncrypter.PROVIDER_NAME);
          ecipher.init(Cipher.ENCRYPT_MODE, key, desparam);

          // create dcipher
          dcipher = Cipher.getInstance(MPIEncrypter.ALGORITHM_WITH_PARA, MPIEncrypter.PROVIDER_NAME);
          dcipher.init(Cipher.DECRYPT_MODE, key, desparam);

          // create a BASE64Encoder referrece
          encoder = new BASE64Encoder();
          decoder = new BASE64Decoder();

          // do logging
          logger.debug("ecipher/dcipher initialization completed");
       } catch (Exception e) {
          // do logging
          logger.error("ecipher/dcipher initialization failed");
          e.printStackTrace();
       }
    }

    /**
     * encrypting data
     *
     * @ param  data: String
     * @ return encrypted data: String
     */
    public static String encrypt(String data) {
       // constructor init only once
       if (ecipher == null) {
          new MPIEncrypter();
       }
       try {
          // Encode the string into bytes using utf-8
          byte[] utf8 = data.getBytes(MPIEncrypter.ENCODE_TYPE);

          // Encrypt
          byte[] enc = ecipher.doFinal(utf8);

          // do logging
          logger.debug("encrypt completed");

          // Encode bytes to base64 to get a string
          return encoder.encode(enc);
       } catch (Exception e) {
          // do logging
          logger.error("encrypt failed");
          e.printStackTrace();
       }
       return null;
    }

    /**
     * dencrypting data
     *
     * @ param  data: String
     * @ return decrypted data: String
     */
    public static String decrypt(String data) {
       // constructor init only once
       if (ecipher == null && dcipher == null) {
          new MPIEncrypter();
       }
       try {
          // Decode base64 to get bytes
          byte[] dec = decoder.decodeBuffer(data);

          // Decrypt
          byte[] utf8 = dcipher.doFinal(dec);

           // do logging
          logger.debug("decrypt completed");

          // Decode using utf-8
          return new String(utf8, MPIEncrypter.ENCODE_TYPE);
       } catch (Exception e) {
          // do logging
          logger.error("decrypt failed");
          e.printStackTrace();
       }
       return null;
    }

	/**
	 * [Gang's Note: This main class may be used as standalone application
	 * @param args - command line parameters
	 */
	public static void main ( String[] args )
	{
		if ( args.length != 2 )
		{
			System.out.println(
					"Usage: java com.oncecorp.visa3d.mpi.security.MPIEncrypter -d|-e password");
		}
		else
		{
			if ( args[0].trim().equals("-e") )
			{
				System.out.println("Encrypt result:[" + encrypt( args[1] )  + "]");
			}
			else
			{
				System.out.println("Decrypt result:[" + decrypt( args[1] )  + "]");
			}
		}
	}
}